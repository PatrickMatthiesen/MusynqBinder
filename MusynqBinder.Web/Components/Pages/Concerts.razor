@page "/concerts"
@using MusynqBinder.Shared.DTO
@using System.Globalization
@inject IHttpClientFactory httpClientFactory
@inject ILogger<Concerts> Logger
@rendermode InteractiveServer

<h3>Concerts</h3>
<p>@RendererInfo.Name</p>

<EditForm Model="artistName" OnSubmit="LoadConcerts" FormName="SearchArtists" >

<input name="artistSearchInput" @bind="artistName" placeholder="Search artist..." />
<button class="button" type="submit">Search</button>

@if (concerts == null)
{
    <p><em>@placeholder</em></p>
}
else if (concerts is [])
{
    <p>No concerts found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Artist</th>
                <th>Venue</th>
                <th>City</th>
                <th>Country</th>
                <th>Tickets</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var concert in concerts)
            {
                <tr>
                    <td class="text-nowrap">🗓️@concert.Date.ToString("ddd dd MMM ", CultureInfo.CreateSpecificCulture("en-US"))</td>
                    <td>@string.Join(", ", GetTop5SimilarArtists(concert.Artists.Select(a => a.Name).ToList(), artistName))</td>
                    <td>@concert.VenueName</td>
                    <td>@concert.City</td>
                    <td>@concert.Country</td>
                    <td><a href="@concert.TicketUrl" target="_blank">Buy</a></td>
                </tr>
            }
        </tbody>
    </table>
}
</EditForm>

@code {
    private string artistName = "Dabin";
    private string placeholder = "^ search for your favorite artist";
    private CultureInfo culture = CultureInfo.CreateSpecificCulture("en-US");
    private List<ConcertDto>? concerts;

    private async Task LoadConcerts()
    {
        concerts = null;
        placeholder = "Loading concerts...";

        try
        {
            var httpClient = httpClientFactory.CreateClient("ConcertTrackerApi");
            concerts = await httpClient.GetFromJsonAsync<List<ConcertDto>>($"api/concerts/{Uri.EscapeDataString(artistName)}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading concerts for {ArtistName}", artistName);
            placeholder = "Error loading concerts. Please try again later.";
        }
    }

    private List<string> GetTop5SimilarArtists(List<string> names, string searchString) {
        return names
            .OrderBy(n => LevenshteinDistance(n, searchString))
            .Take(5)
            .ToList();
    }

    private int LevenshteinDistance(string a, string b) {
        if (string.IsNullOrEmpty(a))
            return b?.Length ?? 0;
        if (string.IsNullOrEmpty(b))
            return a.Length;

        var costs = new int[b.Length + 1];
        for (int j = 0; j < costs.Length; j++)
            costs[j] = j;

        for (int i = 1; i <= a.Length; i++)
        {
            costs[0] = i;
            int prevCost = i - 1;
            for (int j = 1; j <= b.Length; j++)
            {
                int currentCost = costs[j];
                costs[j] = Math.Min(
                    Math.Min(costs[j] + 1, costs[j - 1] + 1),
                    prevCost + (a[i - 1] == b[j - 1] ? 0 : 1));
                prevCost = currentCost;
            }
        }
        return costs[b.Length];
    }
}
