@preservewhitespace true
@inject IJSRuntime JS
@inject ILogger<InputAutoSuggest> _logger
@implements IAsyncDisposable


<div class="flex-grow relative">
	<label for="@name" class="sr-only">@label</label>
	<input 
		   @ref="inputRef"
		   type="search"
		   id="@name"
		   name="@name"
		   placeholder="@placeholder"
		   class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
		   autocomplete="off"
		   @onfocusout="() => showSuggestions = false" />

	@if (showSuggestions && suggestions?.Count > 0)
	{
		<div class="absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-lg shadow-lg z-10 max-h-60 overflow-y-auto">
			@foreach (var suggestion in suggestions)
			{
				<div class="px-4 py-2 hover:bg-gray-100 cursor-pointer transition-colors"
					 @onmousedown="@(() => SelectSuggestion(suggestion))"
					 @onmousedown:preventDefault="true">
					@suggestion
				</div>
			}
		</div>
	}
</div>

@code {
	private ElementReference inputRef;
	private IJSObjectReference? _module;
	private DotNetObjectReference<InputAutoSuggest>? _selfRef;
	private string searchString = string.Empty;

	[Parameter, EditorRequired]
	public string name { get; set; }
	
	[Parameter, EditorRequired]
	public string label { get; set; }
	
	[Parameter, EditorRequired]
	public string placeholder { get; set; }
	
	[Parameter, EditorRequired]
	public EventCallback<string> onInput { get; set; }
	
	[Parameter, EditorRequired]
	public List<string> suggestions { get; set; } = new();
	
	[Parameter]
	public EventCallback<string> onSuggestionSelected { get; set; }
	
	[Parameter]
	public int DebounceMs { get; set; } = 300;
	
	[Parameter]
	public int MinimumLength { get; set; } = 2;

	private bool showSuggestions = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/debounce.js");
			_selfRef = DotNetObjectReference.Create(this);
			await _module.InvokeVoidAsync("initDebounce", inputRef, _selfRef, DebounceMs);
			if (!string.IsNullOrEmpty(searchString))
			{
				await _module.InvokeVoidAsync("setInputValue", inputRef, searchString);
			}
		}
	}

	[JSInvokable]
	public async Task OnDebouncedInput(string value)
	{
		searchString = value;

		if (string.IsNullOrWhiteSpace(value) || value.Length < MinimumLength)
		{
			showSuggestions = false;
			suggestions.Clear();
			await InvokeAsync(StateHasChanged);
			return;
		}

		showSuggestions = true;
		await onInput.InvokeAsync(value);
	}

	private async Task SelectSuggestion(string selectedValue)
	{
		searchString = selectedValue;
		showSuggestions = false;
		suggestions.Clear();
		if (_module is not null)
		{
			await _module.InvokeVoidAsync("setInputValue", inputRef, selectedValue);
		}
		await onSuggestionSelected.InvokeAsync(selectedValue);
	}

	public async ValueTask DisposeAsync()
	{
		try
		{
			if (_module is not null)
			{
				await _module.DisposeAsync();
			}
		}
		catch { }
		_selfRef?.Dispose();
	}
}
